-----------------------------------------------------------------------------------------------------------------
LIBRARY FUNCTIONS!!!!!!
ok cvs im making a start to this before we add like 100 more functions we'll never remember to use again
-TJP

yiipeeeeeeeeeeee time to destroy my keyboard
-CVS

NOTES:
remember to keep things alphabetical (by that i mean the titles AND the functions within them)
remember to describe what each parameter does AND what the output could look like
try to keep the spacing consistent
-----------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------
                                             CALLBACKS
------------------------------------------------------------------------------------------------
---
scheduleCallback(foo, delay, callback, noCancelOnNewRoom)

This function schedules a callback to run after a certain amount of time! Very good for special collision (i.e. Stoner's interactions with Brimstone) and certain renders (such as text that slowly appears and dissapears)

Also normally used for certain effects in items, i.e. Stinky Socks cloud or Urn of Souls wisp thingies.

"foo" is the function you're running.
"delay" is the amount of frames that should pass before the function is called.
"callback" is the callback this belongs to. KEEP IN MIND! Varibales from that callback WILL NOT be used in the function.
"noCancelOnNewRoom" makes it so the callback isn't overriden when changing rooms.

Ask CVS for more questions.
---

------------------------------------------------------------------------------------------------
                                           ENTITIES
------------------------------------------------------------------------------------------------

---
CheckForEntInRoom(npc, id, var, sub)

A very scuffed version of Isaac.FindByType
Recommended not to use.

"npc" is the entity that is being checked for, in the same format as mod:ENT() (i.e. a table that looks like {ID = , Var = ,Sub = 0}).
-- OPTIONAL --
"id" states if the ID of a entity should be checked for. It is set to true if not given a value
"var" states of the Variant of a entity should be checked for. It is set to false if not given a value
"sub" states of the Subtype of a entity should be checked for. It is set to false if not given a value

RETURNS boolean TRUE or FALSE
---

---
CheckForOnlyEntInRoom(npcs, id, var, sub)

Checks if ONLY the table of npc's is in the room

"npcs" is a list of entities that is being checked for, with each one in the same format as mod:ENT() (i.e. a table that looks like {ID = , Var = ,Sub = 0}).
-- OPTIONAL --
"id" states if the ID of a entity should be checked for. It is set to true if not given a value
"var" states of the Variant of a entity should be checked for. It is set to false if not given a value
"sub" states of the Subtype of a entity should be checked for. It is set to false if not given a value

RETURNS boolean TRUE or FALSE
---

---
confusePos(npc, pos, frameCountCheck, isVec, alwaysConfuse)

Returns the same position as given if the NPC is not confused.

If the npc is confused, returns either a random position, or if "isVec", returns either a random position or the NPC'S position

"npc" is the NPC
"pos" is the given position you wish to manitpulate
-- OPTIONAL --
"frameCountCheck" makes it so the entity doesn't behave like this if the frame is perfectly divisble by the number you give.
"isVec" means that the NPC will not be comepltely confused if the new position is incredibly close to it.
"alwaysConfuse" just means the function should act as if the npc is always confused.

RETURN EXAMPLE:
Vector(-123, 43)

Ask CVS for any more questions!

---
reverseIfFear(npc, vec, multiplier)

Checks if a entity is scared. If it is, reverses the entity's velocity. The multiplier, well, multiplies the backwards velocity.

"npc" is the NPC.
"vec" is the NPC's velocity OR another thing's velocity.
-- OPTIONAL --
"multiplier" is the negative multiplier. It is set to 1 if not given a value

RETURN EXAMPLE:
Vector(-220, -120)

Ask CVS for more questions
---

---
FindClosestNextEntitySpawn(npc, dist, random)

Currently does not work.

Do not ask CVS for more questions.
---

---
freeGrid(npc, path, far, close, closest)

Finds a free grid for the entity.

"npc" is the NPC.
-- OPTIONAL --
"path" is a BOOLEAN. If true, the npc will only find positions it can travel to via walking. It is set to false if not given a value
"far" is the farthest the entity can search for a grid position. It is set to 300 if not given a value
"close" is the closest a entity can search for a grid position. It is set to 250 if not given a value
"closest" is a BOOLEAN value which states if the entity should only get the closest position possble. It is set to false if not given a value

RETURN EXAMPLE:
(200, 200)

Ask CVS for more questions.
---

---
freeHole(npc, path, far, close, closest)

Returns a random hole grid.

This function does not work currently.

闭嘴。

---

---
GetClosestEnt(pos, npc, whitelistID, whitelistVAR, whitelistSUB)

Gets the closest entity. If the NPC variable is in the function, makes it so the npc does not try to get itself.
ONLY GETS ACTIVE ENTITIES!!

"pos" is the position you're checking at.
-- OPTIONAL--
"npc" is the npc you blacklist from the check. It is set to nil if not given a value
"whitelistID" is the required ID of the enemy. If an enemy does not have this ID, it is skipped.
"whitelistVAR" is the required Variant of the enemy. If an enemy does not have this Variant, it is skipped.
"whitelistID" is the required SubType of the enemy. If an enemy does not have this SubType, it is skipped.

RETURN EXAMPLE:
userdata:ssagd776gwa7

Ask CVS for more questions.
---

---
GetClosestGridEntToPos(pos, ignorepoop, ignorehole, rocktab)

Gets the closest grid entity.

"pos" is the position you're checking at.
-- OPTIONAL --
"ignorepoop" allows the check to ignore poop. It is set to false if not given a value
"ignorehole" allows the check to ignore holes. It is set to false if not given a value
"rocktab" is the table of rocks the entity is checking. It is set to a incredibly long table i will not put here if not given a value

RETURN EXAMPLE:
(260, -180)

Ask CVS for further info.
---

---
GetClosestGridEntAlongAxis(pos, axis, ignorepoop, ignorehole, rocktab)

Gets the closest grid entity along a axis.

"pos" is the position you're checking at.
"axis" is the axis you're looking on.
-- OPTIONAL --
"ignorepoop" allows the check to ignore poop. It is set to false if not given a value
"ignorehole" allows the check to ignore holes. It is set to false if not given a value
"rocktab" is the table of rocks the entity is checking. It is set to a incredibly long table i will not put here if not given a value

RETURN EXAMPLE:
(260, -180)

Ask CVS for further info.
---

---
GetClosestGridEntAlongAxisDirection(pos, axis, ignorepoop, ignorehole, dir, rocktab, dist, room)

Gets the closest grid entity along a axis.

"pos" is the position you're checking at.
"axis" is the axis you're looking on.
"dir" is the direction you're looking to. 90 and -90 are for X, 180 and 0 are for Y.
"dist" is the cloest the search can be. The larger the number, the larger the space from how close the grid can be.
-- OPTIONAL --
"ignorepoop" allows the check to ignore poop. It is set to false if not given a value
"ignorehole" allows the check to ignore holes. It is set to false if not given a value
"rocktab" is the table of rocks the entity is checking. It is set to a incredibly long table i will not put here if not given a value
"room" is the room it checks. It is set to current room if not given a value

RETURN EXAMPLE:
(260, -180)

Ask CVS for further info.
---

---
GetEntInRoom(ent, avoidnpc, npc, radius)

Highly recommended not to be used.

No seriosuly im not writing something for this it legitimately doesnt work
---

---
GetSpecificEntInRoom(myent, npc, radius)

Gets a random entity that matches the qualifications for the "myent" stats.

"myent" is the entity you're looking for.
"npc" is the npc that is checking.
-- OPTIONAL--
"radius" is the max radius the entity can look for the ent. It is 350 if not given a value.

Ask CVS for further info.
---

---
HasDamageFlag(damageFlag, damageFlags)

Checks if a entity has a damage flag.

"damageFlag" is the flag you're looking for
"damageFlags" is the entity's damage flags

RETURNS boolean TRUE or FALSE

Ask CVS for more questions.
---

---
isConfuse(npc)

Checks if a entity is confused.

RETURNS boolean TRUE or FALSE

Ask CVS for more questions.
---

---
isFriend(npc)

Checks if a entity is friendly.

RETURNS boolean TRUE or FALSE

Ask CVS for more questions.
---

---
isCharm(npc)

Checks if a entity is charmed and friendly (which resides within charmed).

RETURNS boolean TRUE or FALSE

Ask CVS for more questions.
---

---
isScare(npc)

Checks if a entity is scared.

RETURNS boolean TRUE or FALSE

Ask CVS for more questions.
---

---
isScaredOrConfuse(npc)

Checks if a entity is scared or confused.

RETURNS boolean TRUE or FALSE

Ask CVS for more questions.
---

---
isBaited(npc)

Checks if a entity is baited (rotten tomato).

RETURNS boolean TRUE or FALSE

Ask CVS for more questions.
---

---
LoadSavedRoomEnts()

Loads ents saved to the current room.

Ask CVS for further info.
---

---
onEntityTick(type, fn, variant, subtype)

Adds a function to play on entity tick.
YES I'm gonna change all entities to play under this once we finish cellar

"type" is the ID, or Type, of the entity
"fn" is the function, which runs with the npc variable given by FindByType
-- OPTIONAL --
"variant" is the variant of the entity. It is set to -1 (any) if not given a value
"subtype" is the subtype of the entity. It is set to -1 (any) if not given a value

Ask CVS for more questions.
---

---
ReplaceEnemySpritesheet(npc, filepath, layer, loadGraphics)

Replaces a enemy spritesheet. Checks for champion,and loads graphics. Neat!

"npc" is the NPC thats being manipulated.
"filepath" is the path to the new file you're changing the entity's spritesheet to. This includes the file itself, and starts with 'gfx'.
"layer" is the layer of the npc's animation that's being changed. These are the layers on the 'timeline' section of the anm2, rather than the 'spritesheets' section.
-- OPTIONAL --
"loadGraphics" chooses whether the graphics be updated instantly or not. It is set to true if not given a value

Ask CVS for more questions.
---

---
MakeBossDeath(npc, extragore, frame, sfx1, sfx2)

Adds effects and sounds for a animated NPC death. It is supposed to be played under the render function for NPCs instead of the update function.

"npc" is the NPC you're affecting.
-- OPTIONAL --
"extragore", if turned on, adds extra smaller gibs during the animation. It is set to true if not given a value
"frame" is the consistency between frames for when gibs fly out. It is set to 4 if not given a value
"sfx1" is the sounds that play while small gibs come out. It is set to SoundEffect.SOUND_MEAT_JUMPS if not given a value
"sfx2" is the sound that plays once the boss fully dies. It is set to SoundEffect.SOUND_DEATH_BURST_LARGE if not given a value

Ask CVS for further info.
---

---
MakeInvulnerable(npc)

Make a entity comepltely invulenrable; it has no collision with anything.

"npc" is the NPC thats being manipulated

Ask CVS for more questions.
---

---
MakeVulnerable(npc)

Makes a entity comepltely vulnerable, including allowing it to take knockback.
Generally recommended if you use the "MakeInvulnerable" function.

"npc" is the NPC thats being manipulated.

Ask CVS for more questions.
---

---
Orbit(npc, ent, speed, orb)

Makes a entity orbit another entity.

"npc" is the NPC you're making orbit.
"ent" is the entity the NPC is orbiting.
-- OPTIONAL --
"speed" is the speed in which the NPC orbits. It is set to 1 if not given a value
"orb" is the distance the NPC rotates from the entity. It is set to 70 if not given a value

Ask CVS for further info.
---

---
SaveEntToRoom(npc)

Saves a entity to the current room. This data gets overridden on a new floor.

"npc" is the NPC you're saving.

Ask CVS for further info.
---

------------------------------------------------------------------------------------------------
                                           FAMILIARS
------------------------------------------------------------------------------------------------
"hoot hoot" - my dog
---
isSirenCharmed(familiar)

Checks if a entity is siren charmed.

"familiar" is the familiar you're checking.

RETURN EXAMPLE:
false, nil

true, userdata: 88sgG8gS7

Ask CVS for more questions.
---

------------------------------------------------------------------------------------------------
                                        FLOORS N' STAGES
------------------------------------------------------------------------------------------------
---
CheckStage(stagename, backdroptypes)

Checks for a stage based on either the name of the stage or the backdrop.
HIGHLY recommended to use backdrop as different languages of the game return different names for the stage, somewhat breaking stagename.

"stagename" is the name of the stage (such as "Cellar" or "Basement", be sure to capatalize!)
"backdroptypes" is a TABLE of backdrops it checks through

RETURNS boolean TRUE or FALSE

Ask CVS for more questions!
---

------------------------------------------------------------------------------------------------
                                               MISC
------------------------------------------------------------------------------------------------

---
DeliriumRoom()

Checks if the room spawns with delirium (said room being ONLY demiirum's boss room)

RETURNS boolean TRUE or FALSE

Ask CVS for further info.
---

---
getMinSec(totalSeconds)

Splits any number into a amount of minutes and leftover seconds.

"totalSeconds" is the total amount of seconds you're inputting in.

RETURN EXAMPLE
2, 45

Ask CVS for further info.
---

---
GetRoomNameByType(type)

Gets the name of a room by it's Type Value.

"type" is the type of the room.

RETURN EXAMPLE:
"Secret Exit"

Ask CVS for further info.
---

---
removeSubstring(str, substr)

Removes the subtring from the string. Returns that...

"str" - main string.
"substr" - the string you want to remove.

RETURN EXAMPLE
"I have a goldfish" -> "i a goldfish"
---

------------------------------------------------------------------------------------------------
                                            MOVEMENT
------------------------------------------------------------------------------------------------
---
ConvertVectorToWordDirection(velocity, Xpriority, Ypriority)

This function grabs a Vector and turns it into either "up", "down", "left" or "right"
If Xpriority and Ypriority are both 0, it will return act as if only Ypriority is 0

"velocity" is the velocity.
"Xpriority" controls how much the function prefers X over Y. if Xpriority is 0, then the function will only return "Up" or "Down"
"Ypriority" controls how much the function prefers Y over X. if Ypriority is 0, then the function will only return "Left" or "Right"

RETURN EXAMPLE:
"Up"
"Down"
"Left"
"Right"

Ask TJP for further questions
---

---
ConvertWordDirectionToVector(direction)

This function takes either "up", "down", "left" or "right" and turns them into a vector

"direction" is one of the four directions i literally just mentioned

RETURN EXAMPLE:
(0,-1)
(0,1)
(-1,0)
(1,0)

Ask TJP for further questions
---

---
Lerp(first, second, percent, smoothIn, smoothOut)

Changes a Vector by getting the percent of a vector via shifting it's velocity to the "second" (treating second as a position)

"first" is your velocity or the velocity you want to move.
"second" is the position you want to go to. Sick!
"percent" is the percent of the distance you want to move. 1 means it will go there instantly. Anything less and it "moves" there.
"smoothIn" will make it square the percent by the smoothIn!
"smoothOut" kinda does the same, but backwards.

RETURN EXAMPLE:
Vector(-10, 10)

Ask CVS for further info :P
---

------------------------------------------------------------------------------------------------
                                            PLAYER
------------------------------------------------------------------------------------------------

---
AddTempItem(item, player, callback)

Gives a temporary item to the given player.
Shockingly, technically EVERYTHING in this callback is optional.

-- OPTIONAL --
"player" is the player you are providing the item for. It is set to the first player in Isaac.GetPlayer() if not given a value
"item" is the item you are providing. It is set to CollectibleType.COLLECTIBLE_SAD_ONION if not given a value
"callback" is the callback the player should recieve the item on. It is set to ModCallbacks.MC_POST_NEW_ROOM if not given a value

Ask CVS for further info.
---

---
AnyPlayerHasCollectible(collectibleType)

Checks if any player has a collectible. Uses the trinket ID to check.

"collectibleType" is the ID of the trinket.

RETURNS boolean TRUE or FALSE.

Ask CVS for more questions.
---

---
AnyPlayerHasTrinket(trinketType)

Checks if any player has a trinket. Uses the trinket ID to check.

"trinketType" is the ID of the trinket.

RETURNS boolean TRUE or FALSE.

Ask CVS for more questions.
---

---
GetClosestPlayer(pos)

Gets the closest player to a position.

"pos" is the position you're checking at.

RETURN EXAMPLE
userdata: asiduh7wydw

Ask CVS for further info.
---

---
GetPlayerCollectibles(player)

Returns a table of all the collectibles a player owns, in ID. DOES NOT, and i repeat, DOES NOT return wisp items.

"player" is the player entity you're gathering data from.

RETURN EXAMPLE:
{743, 121, 243, 5}

Ask CVS for further info.
---


---
IsSourceofDamagePlayer(source, bomb)

Checks if a source of damage is from a player.

"source" is the source of damage (usually taken from the MC_ModCallbacks.ENTITY_TAKE_DMG callback)
-- OPTIONAL --
"bomb" is a optonal varibale. If set to true, it will also check if damage come from a player's bomb. It is set to false if not given a value

RETURNS boolean TRUE or FALSE

Ask CVS for further info.
---

---
PostUpdateRemoveTempItems(player)

Removes temporary items from a player.

This is what makes the mod:RemoveTempItem(items) function useful.

"player" is the player you are removing temporary items from.

Ask CVS for further info.
---

---
RemoveTempItem(items)

You acually will never need to use this.

Reads over the given items. Removes them on the callback they were given.

"items" are the items being taken away.

Ask CVS for further info.
---

---
tearsUp(firedelay, val)

Returns the correct number for a tears up value (because nicalis is a BITCH it can't just be straightfoward)

"firedelay" is the current player's firedelay
"val" is the value you want to change - a NEGATIVE value increases your tear rate, and a POSITIVE value decreases it.

RETURN EXAMPLE:
3.2857142857143

Ask CVS for further info.
---




------------------------------------------------------------------------------------------------
                                            POSITION
------------------------------------------------------------------------------------------------
---
GetClosestMinisaacAttackPos(pos, targetpos, distfromtarget, lineofsight, closelimit)

This function checks the 4 cardinal directions around a chosen position and returns the closest one,
as well the the direction you'd need the face to be facing targetpos
 
"pos" is the initial position. It is compared to each option to find the closest one
"targetpos" is the target position (no shit)
"distfromtarget" is how big the distance from the targetpos can be
"lineofsight" is if you should be able to draw a line from winner to targetpos
"closelimit" is how small the distance from the targetpos can be

RETURN EXAMPLE:
(144, 50), "Down"

Ask TJP for further questions
---

---
getDistanceToLineSegment(point, lineStart, lineEnd)

Gives you the distance to a certain line segment. You can choose where it starts or stops. 
(Surprsingly unconventional)

"point" is the position you start at.
"lineStart" is where the segment starts
"lineEnd" is where the segment ends

RETURN EXAMPLE:
134.532

Ask CVS for further questions!
---

---
FindEntitiesInLine(lineStart, lineEnd, ent)

Gives you all the entities in a line.

"lineStart" is where the line starts
"lineEnd" is where the line ends
"ent" is a OPTIONAL value. If used, it will ONLY find that entity in the line. Otherwise, it will find EVERY entity in the line.

RETURN EXAMPLE:
{userdata: 3298798df,
userdata: 239df98389S}

^^^ those are pointer values for entites

Ask CVS for more questions
---

---
AreEntitiesInLine(lineStart, lineEnd, ent)

Finds if a specific entity is in a line.
Unfortunately, kinda useless since FindEntitiesInLine already does that.

"lineStart" is where the line starts
"lineEnd" is where the line ends
"ent" is the NPC userdata value of a entity.

RETURNS boolean TRUE or FALSE

Ask CVS for more questions
---

------------------------------------------------------------------------------------------------
                                             TABLES
------------------------------------------------------------------------------------------------
im playing table games! - CVS
---
CheckTableContents(table, element)

Checks if the element is in the table. DOES NOT work with arrays! (As far as I know)

"table" - is the table
"element" - what you're looking for in the table

RETURNS boolean TRUE or FALSE.

---

---
FindLongerorShorterTable(tables, long, longest)

Finds you the longer or shorter table. 

"tables" is a table of tables. 
"long" is a boolean value! If it's FALSE, it means you will get the shortest table. If it's TRUE, it means you'll get the longest table.
"longest" is a number variable. Setting it means it caps how large the "longest" table can be (that gets returned to you)

RETURNS EXAMPLE
{table 2, table 1}

Ask CVS for any more questions :)
---

---
getSeveralDifferentNumbers(needed, totalAmount, customRNG, blacklist)

Gives you a table of a bunch of different numbers. How neat!

"needed" is the amount of numbers you actually want to be variable (not 1)
"totalAmount" is the amount of numbers you want. 
"customRNG" is any specific RNG you want to feed it! This include room RNG and entity RNG.
"blacklist" is a list of numbers you don't want to show up. Oh, well.

RETURN EXAMPLE
{1, 4, 6, 2, 7}

Ask CVS for any more questions.
---

---
MixTables(input, table)

Does what you think it does. It will MIX the FIRST table into the SECOND.

This means the SECOND TABLE will have data from the FIRST, 
but the FIRST WILL NOT have data from the second.

"input" is the FIRST TABLE.
"table" is the SECOND TABLE.

I really dont know how you would have further questions but ¯\_(ツ)_/¯ 
---

---
ValidifyTables(table1, table2, basedonlength)

Checks if two tables are the same.
If the "basedonlength" variable is TRUE, it will ALWAYS check the longer table to the shorter table, instead of just the first to the second.

"table1" - first table!
"table2" - second table. 
"basedonlength" - if set to true, the first table will be checked against the second, instead of in order.

RETURNS boolean TRUE or FALSE.
---


